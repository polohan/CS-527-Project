[INFO] Scanning for projects...
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO] 
[INFO] ----------------< com.alibaba.compileflow:compileflow >-----------------
[INFO] Building compileflow 1.2.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-maven) @ compileflow ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ compileflow ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 7 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ compileflow ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ compileflow ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 10 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ compileflow ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ compileflow ---
[INFO] Surefire report directory: /home/target/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.allibaba.compileflow.test.mock.TestRunTime
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.023 sec
Running com.allibaba.compileflow.test.ProcessEngineTest
Nov 14, 2021 4:57:20 AM org.springframework.test.context.TestContextManager retrieveTestExecutionListeners
INFO: Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext]
Nov 14, 2021 4:57:20 AM org.springframework.test.context.TestContextManager retrieveTestExecutionListeners
INFO: Could not instantiate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
Nov 14, 2021 4:57:20 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [bean/common.xml]
Nov 14, 2021 4:57:20 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [bean/ktv.xml]
Nov 14, 2021 4:57:20 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [bean/orderFulfillment.xml]
Nov 14, 2021 4:57:20 AM org.springframework.context.support.GenericApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.support.GenericApplicationContext@6f204a1a: startup date [Sun Nov 14 04:57:20 IST 2021]; root of context hierarchy
Nov 14, 2021 4:57:20 AM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3e74829: defining beans [applicationContextProvider,ktvService,workFlowRouter,deliveryOrderCreateActivity,autoChargeActivity,paymentCallbackInfoUpdateActivity,orderValidateActivity,priceCalculateActivity,userTagUpdateActivity,paymentOrderCreateActivity,paymentPendingCallbackActivity,orderReverseActivity,securityValidateStatusUpdateActivity,paymentFundApportionActivity,orderCreateActivity,waitPaymentSuccessActivity,inventoryReduceActivity,orderGroupCreateActivity,deliveredCallbackActivity,timeoutCancelActivity,priceValidateActivity,zeroPayActivity,deliveryValidateActivity,securityManualCheckCallbackActivity,promotionValidateActivity,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
package bpm.om;

import com.alibaba.compileflow.engine.process.preruntime.generator.bean.BeanProvider;
import com.alibaba.compileflow.engine.common.utils.ObjectFactory;
import com.alibaba.compileflow.engine.ProcessEngineFactory;
import java.util.HashMap;
import java.lang.Integer;
import java.util.Map;
import com.alibaba.compileflow.engine.runtime.instance.ProcessInstance;
import com.alibaba.compileflow.engine.common.utils.DataType;
import com.allibaba.compileflow.test.mock.MockJavaClazz;

public class WaitpaySuccessflowFlow implements ProcessInstance {

    private java.lang.Integer num = null;
    private java.lang.Integer numSqrt = null;

    public Map<String, Object> execute(Map<String, Object> _pContext) throws Exception {
        num = (Integer)DataType.transfer(_pContext.get("num"), Integer.class);
        Map<String, Object> _pResult = new HashMap<>();
        //AutoTaskNode: 计算平方根
        numSqrt = ((MockJavaClazz)ObjectFactory.getInstance("com.allibaba.compileflow.test.mock.MockJavaClazz")).mockReturnMethod(num);
        //WaitEventNode: ֧等待支付成功事件
        if (true) {
            _pResult.put("numSqrt", numSqrt);
            return _pResult ;
        } 
        //AutoTaskNode: 计算价格2
        numSqrt = ((MockJavaClazz)ObjectFactory.getInstance("com.allibaba.compileflow.test.mock.MockJavaClazz")).calPrice(num);
        _pResult.put("numSqrt", numSqrt);
        return _pResult;
    }

}
java: minus 100
package bpm.ktv;

import org.junit.Assert;
import com.alibaba.compileflow.engine.ProcessEngineFactory;
import java.util.Map;
import com.alibaba.compileflow.engine.ProcessEngine;
import org.junit.Test;
import junit.framework.TestCase;
import java.util.HashMap;

public class KtvExampleFlow_TEST extends TestCase {


    @Test
    public void testProcess() throws Exception {
        String code = "bpm.ktv.ktvExample";
        ProcessEngine engine = ProcessEngineFactory.getProcessEngine();
        System.out.println(engine.getJavaCode(code));
        Map<String, Object> context = new HashMap<String, Object>();
        context.put("pList", null);
        try {
            System.out.println(engine.execute(code, context));
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
    }

}
wuxiang is singing
yusu is singing
total price: 60
actually paid money: 60
{price=60}
package bpm.om;

import com.allibaba.compileflow.test.om.activity.DeliveryOrderCreateActivity;
import java.util.HashMap;
import com.alibaba.compileflow.engine.common.utils.DataType;
import com.allibaba.compileflow.test.om.activity.OrderCreateActivity;
import com.allibaba.compileflow.test.om.activity.PaymentOrderCreateActivity;
import com.allibaba.compileflow.test.om.context.BusinessContext;
import com.allibaba.compileflow.test.om.activity.SecurityValidateStatusUpdateActivity;
import com.allibaba.compileflow.test.om.activity.InventoryReduceActivity;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import com.alibaba.compileflow.engine.common.utils.ObjectFactory;
import com.alibaba.compileflow.engine.ProcessEngineFactory;
import com.allibaba.compileflow.test.om.activity.OrderGroupCreateActivity;
import com.allibaba.compileflow.test.om.router.WorkFlowRouter;
import com.allibaba.compileflow.test.om.activity.AutoChargeActivity;
import com.allibaba.compileflow.test.om.activity.OrderReverseActivity;
import com.alibaba.compileflow.engine.process.preruntime.generator.bean.BeanProvider;
import com.alibaba.compileflow.engine.runtime.instance.ProcessInstance;
import com.allibaba.compileflow.test.om.activity.ZeroPayActivity;

public class GeneralOrderFulfillmentFlowFlow implements ProcessInstance {

    private com.allibaba.compileflow.test.om.context.BusinessContext BUSINESS_CONTEXT = null;
    private java.lang.String paymentType = "";
    private java.lang.Boolean pureZero = null;
    private java.lang.Boolean inventoryReduceFlag = null;
    private java.lang.Boolean securityAutoCheckFlag = null;
    private java.lang.Boolean securityManualCheckFlag = null;
    private java.lang.Boolean amendmentJudgementFlag = null;

    public Map<String, Object> execute(Map<String, Object> _pContext) throws Exception {
        BUSINESS_CONTEXT = (BusinessContext)DataType.transfer(_pContext.get("BUSINESS_CONTEXT"), BusinessContext.class);
        Map<String, Object> _pResult = new HashMap<>();
        //SubBpmNode: 订单保存前校验子流程
        {
            Map<String, Object> _subBpmContext = new HashMap<>();
            _subBpmContext.put("BUSINESS_CONTEXT", BUSINESS_CONTEXT);
            ProcessEngineFactory.getProcessEngine().start("bpm.om.validateBeforeSavingSubFlow", _subBpmContext);
        }
        //AutoTaskNode: 创建订单
        ((OrderCreateActivity)BeanProvider.getBean("orderCreateActivity")).execute(BUSINESS_CONTEXT);
        //DecisionNode: 是否追加订单
        workFlowRouterAmendmentJudgement();
        if (amendmentJudgementFlag == false) {
            //否
            //DecisionNode: 是否是0元支付
            workFlowRouterIsPureZero();
            if (pureZero == false) {
                //否
                //AutoTaskNode: 创建收单
                ((PaymentOrderCreateActivity)BeanProvider.getBean("paymentOrderCreateActivity")).execute(BUSINESS_CONTEXT);
                //DecisionNode: 支付方式判断
                workFlowRouterGetPaymentType();
                if (paymentType == "autoCharge") {
                    //自动续费支付方式
                    //AutoTaskNode: 自动续费
                    ((AutoChargeActivity)BeanProvider.getBean("autoChargeActivity")).execute(BUSINESS_CONTEXT);
                    if(true) {
                        return _pResult ;
                    } ;
                } else if (paymentType == "offline") {
                    //线下支付方式
                    if(true) {
                        return _pResult ;
                    } ;
                } else if (paymentType == "online") {
                    //线上支付方式
                    if(true) {
                        return _pResult ;
                    } ;
                }
            } else if (pureZero == true) {
                //是
                //AutoTaskNode: 0元支付处理
                ((ZeroPayActivity)BeanProvider.getBean("zeroPayActivity")).execute(BUSINESS_CONTEXT);
                //AutoTaskNode: 库存扣减
                ((InventoryReduceActivity)BeanProvider.getBean("inventoryReduceActivity")).execute(BUSINESS_CONTEXT);
                //DecisionNode: 库存扣减结果判断
                workFlowRouterIsReduceInventorySuccess();
                if (inventoryReduceFlag == false) {
                    //扣减失败
                    //AutoTaskNode: 订单逆向
                    ((OrderReverseActivity)BeanProvider.getBean("orderReverseActivity")).execute(BUSINESS_CONTEXT);
                } else if (inventoryReduceFlag == true) {
                    //扣减成功
                    //AutoTaskNode: 安全校验状态更新
                    ((SecurityValidateStatusUpdateActivity)BeanProvider.getBean("securityValidateStatusUpdateActivity")).execute(BUSINESS_CONTEXT);
                    //DecisionNode: 安全校验判断
                    workFlowRouterIsSecurityAutoCheckPass();
                    if (securityAutoCheckFlag == true) {
                        //校验通过
                        //AutoTaskNode: 创建履约单
                        ((DeliveryOrderCreateActivity)BeanProvider.getBean("deliveryOrderCreateActivity")).execute(BUSINESS_CONTEXT);
                        if(true) {
                            return _pResult ;
                        } ;
                    } else if (securityAutoCheckFlag == false) {
                        //校验中
                        if(true) {
                            return _pResult ;
                        } ;
                    }
                }
            }
        } else if (amendmentJudgementFlag == true) {
            //是
            //AutoTaskNode: 创建订单组
            ((OrderGroupCreateActivity)BeanProvider.getBean("orderGroupCreateActivity")).execute(BUSINESS_CONTEXT);
            //DecisionNode: 是否是0元支付
            workFlowRouterIsPureZero();
            if (pureZero == false) {
                //否
                //AutoTaskNode: 创建收单
                ((PaymentOrderCreateActivity)BeanProvider.getBean("paymentOrderCreateActivity")).execute(BUSINESS_CONTEXT);
                //DecisionNode: 支付方式判断
                workFlowRouterGetPaymentType();
                if (paymentType == "autoCharge") {
                    //自动续费支付方式
                    //AutoTaskNode: 自动续费
                    ((AutoChargeActivity)BeanProvider.getBean("autoChargeActivity")).execute(BUSINESS_CONTEXT);
                    if(true) {
                        return _pResult ;
                    } ;
                } else if (paymentType == "offline") {
                    //线下支付方式
                    if(true) {
                        return _pResult ;
                    } ;
                } else if (paymentType == "online") {
                    //线上支付方式
                    if(true) {
                        return _pResult ;
                    } ;
                }
            } else if (pureZero == true) {
                //是
                //AutoTaskNode: 0元支付处理
                ((ZeroPayActivity)BeanProvider.getBean("zeroPayActivity")).execute(BUSINESS_CONTEXT);
                //AutoTaskNode: 库存扣减
                ((InventoryReduceActivity)BeanProvider.getBean("inventoryReduceActivity")).execute(BUSINESS_CONTEXT);
                //DecisionNode: 库存扣减结果判断
                workFlowRouterIsReduceInventorySuccess();
                if (inventoryReduceFlag == false) {
                    //扣减失败
                    //AutoTaskNode: 订单逆向
                    ((OrderReverseActivity)BeanProvider.getBean("orderReverseActivity")).execute(BUSINESS_CONTEXT);
                } else if (inventoryReduceFlag == true) {
                    //扣减成功
                    //AutoTaskNode: 安全校验状态更新
                    ((SecurityValidateStatusUpdateActivity)BeanProvider.getBean("securityValidateStatusUpdateActivity")).execute(BUSINESS_CONTEXT);
                    //DecisionNode: 安全校验判断
                    workFlowRouterIsSecurityAutoCheckPass();
                    if (securityAutoCheckFlag == true) {
                        //校验通过
                        //AutoTaskNode: 创建履约单
                        ((DeliveryOrderCreateActivity)BeanProvider.getBean("deliveryOrderCreateActivity")).execute(BUSINESS_CONTEXT);
                        if(true) {
                            return _pResult ;
                        } ;
                    } else if (securityAutoCheckFlag == false) {
                        //校验中
                        if(true) {
                            return _pResult ;
                        } ;
                    }
                }
            }
        }
        _pResult.put("paymentType", paymentType);
        _pResult.put("pureZero", pureZero);
        _pResult.put("inventoryReduceFlag", inventoryReduceFlag);
        _pResult.put("securityAutoCheckFlag", securityAutoCheckFlag);
        _pResult.put("securityManualCheckFlag", securityManualCheckFlag);
        _pResult.put("amendmentJudgementFlag", amendmentJudgementFlag);
        return _pResult;
    }

    private void workFlowRouterAmendmentJudgement() {
        amendmentJudgementFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).amendmentJudgement(BUSINESS_CONTEXT);
    }

    private void workFlowRouterIsPureZero() {
        pureZero = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isPureZero(BUSINESS_CONTEXT);
    }

    private void workFlowRouterGetPaymentType() {
        paymentType = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).getPaymentType(BUSINESS_CONTEXT);
    }

    private void workFlowRouterIsReduceInventorySuccess() {
        inventoryReduceFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isReduceInventorySuccess(BUSINESS_CONTEXT);
    }

    private void workFlowRouterIsSecurityAutoCheckPass() {
        securityAutoCheckFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isSecurityAutoCheckPass(BUSINESS_CONTEXT);
    }

}

package bpm.om;

import com.alibaba.compileflow.engine.common.utils.ObjectFactory;
import com.allibaba.compileflow.test.om.context.BusinessContext;
import com.allibaba.compileflow.test.om.activity.OrderCreateActivity;
import java.util.Map;
import java.util.HashMap;
import com.alibaba.compileflow.engine.common.utils.DataType;
import java.lang.String;
import com.allibaba.compileflow.test.om.activity.OrderReverseActivity;
import com.alibaba.compileflow.engine.process.preruntime.generator.bean.BeanProvider;
import com.allibaba.compileflow.test.om.activity.SecurityValidateStatusUpdateActivity;
import com.allibaba.compileflow.test.om.activity.DeliveryOrderCreateActivity;
import com.allibaba.compileflow.test.om.activity.PaymentOrderCreateActivity;
import com.allibaba.compileflow.test.om.activity.AutoChargeActivity;
import java.lang.Boolean;
import com.allibaba.compileflow.test.om.activity.OrderGroupCreateActivity;
import com.alibaba.compileflow.engine.ProcessEngineFactory;
import com.alibaba.compileflow.engine.runtime.instance.StatefulProcessInstance;
import com.allibaba.compileflow.test.om.activity.ZeroPayActivity;
import com.allibaba.compileflow.test.om.router.WorkFlowRouter;
import com.allibaba.compileflow.test.om.activity.InventoryReduceActivity;

public class GeneralOrderFulfillmentFlowFlow implements StatefulProcessInstance {

    private com.allibaba.compileflow.test.om.context.BusinessContext BUSINESS_CONTEXT = null;
    private java.lang.String paymentType = "";
    private java.lang.Boolean pureZero = null;
    private java.lang.Boolean inventoryReduceFlag = null;
    private java.lang.Boolean securityAutoCheckFlag = null;
    private java.lang.Boolean securityManualCheckFlag = null;
    private java.lang.Boolean amendmentJudgementFlag = null;

    public Map<String, Object> execute(Map<String, Object> _pContext) throws Exception {
        BUSINESS_CONTEXT = (BusinessContext)DataType.transfer(_pContext.get("BUSINESS_CONTEXT"), BusinessContext.class);
        Map<String, Object> _pResult = new HashMap<>();
        //SubBpmNode: 订单保存前校验子流程
        subBpmValidateBeforeSavingSubFlow();
        //AutoTaskNode: 创建订单
        orderCreateActivityExecute();
        //DecisionNode: 是否追加订单
        amendmentJudgementFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).amendmentJudgement(BUSINESS_CONTEXT);
        _pResult.put("paymentType", paymentType);
        _pResult.put("pureZero", pureZero);
        _pResult.put("inventoryReduceFlag", inventoryReduceFlag);
        _pResult.put("securityAutoCheckFlag", securityAutoCheckFlag);
        _pResult.put("securityManualCheckFlag", securityManualCheckFlag);
        _pResult.put("amendmentJudgementFlag", amendmentJudgementFlag);
        return _pResult;
    }

    private void subBpmValidateBeforeSavingSubFlow() {
        //SubBpmNode: 订单保存前校验子流程
        {
            Map<String, Object> _subBpmContext = new HashMap<>();
            _subBpmContext.put("BUSINESS_CONTEXT", BUSINESS_CONTEXT);
            ProcessEngineFactory.getProcessEngine().start("bpm.om.validateBeforeSavingSubFlow", _subBpmContext);
        }
    }

    private void orderCreateActivityExecute() {
        ((OrderCreateActivity)BeanProvider.getBean("orderCreateActivity")).execute(BUSINESS_CONTEXT);
    }

    public Map<String, Object> trigger(Map<String, Object> _pContext, String currentTag) throws Exception {
        BUSINESS_CONTEXT = (BusinessContext)DataType.transfer(_pContext.get("BUSINESS_CONTEXT"), BusinessContext.class);
        Map<String, Object> _pResult = new HashMap<>();
        boolean running = true;
        boolean trigger = true;
        String _event = (String)_pContext.get("eventName") == null?"" :(String)_pContext.get("eventName");
        

        while (running) {
            switch (currentTag) {
                case "SecurityManualJudgeCallback": {
                    if (trigger) {
                    } else {
                        running = false;
                    }
                    currentTag = "manualCheckJudge";
                    break;
                }
                case "inventoryResultJudge": {
                    //DecisionNode: 库存扣减结果判断
                    inventoryReduceFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isReduceInventorySuccess(BUSINESS_CONTEXT);
                    if (inventoryReduceFlag == false) {
                        currentTag = "OrderReverse";
                        break;
                    }
                    if (inventoryReduceFlag == true) {
                        currentTag = "SecurityAutoJudge";
                        break;
                    }
                }
                case "DeliveredCallback": {
                    if (trigger) {
                    } else {
                        running = false;
                    }
                    currentTag = "end";
                    break;
                }
                case "DeliveryOrderCreate": {
                    //AutoTaskNode: 创建履约单
                    deliveryOrderCreateActivityExecute();
                    currentTag = "DeliveredCallback";
                    break;
                }
                case "SecurityAutoJudge": {
                    //AutoTaskNode: 安全校验状态更新
                    securityValidateStatusUpdateActivityExecute();
                    currentTag = "securityJudge";
                    break;
                }
                case "end": {
                    running = false;
                    break;
                }
                case "OrderReverse": {
                    //AutoTaskNode: 订单逆向
                    orderReverseActivityExecute();
                    currentTag = "end";
                    break;
                }
                case "zeroPayJudge": {
                    //DecisionNode: 是否是0元支付
                    pureZero = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isPureZero(BUSINESS_CONTEXT);
                    if (pureZero == false) {
                        currentTag = "PaymentOrderCreate";
                        break;
                    }
                    if (pureZero == true) {
                        currentTag = "OMZeroPayActivity";
                        break;
                    }
                }
                case "InventoryReduce": {
                    //AutoTaskNode: 库存扣减
                    inventoryReduceActivityExecute();
                    currentTag = "inventoryResultJudge";
                    break;
                }
                case "paymentMethodJudge": {
                    //DecisionNode: 支付方式判断
                    paymentType = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).getPaymentType(BUSINESS_CONTEXT);
                    if (paymentType == "autoCharge") {
                        currentTag = "OMAutoChargeActivity";
                        break;
                    }
                    if (paymentType == "offline") {
                        currentTag = "PaymentPendingCallback";
                        break;
                    }
                    if (paymentType == "online") {
                        currentTag = "waitPaymentSuccess";
                        break;
                    }
                }
                case "start": {
                    currentTag = "validateBeforeSavingSubFlow";
                    break;
                }
                case "waitPaymentSuccess": {
                    if (trigger) {
                    } else {
                        running = false;
                    }
                    currentTag = "PaymentSuccessCallback";
                    break;
                }
                case "OMAutoChargeActivity": {
                    //AutoTaskNode: 自动续费
                    autoChargeActivityExecute();
                    currentTag = "waitPaymentSuccess";
                    break;
                }
                case "PaymentOrderCreate": {
                    //AutoTaskNode: 创建收单
                    paymentOrderCreateActivityExecute();
                    currentTag = "paymentMethodJudge";
                    break;
                }
                case "workFlowRouter": {
                    //DecisionNode: 是否追加订单
                    amendmentJudgementFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).amendmentJudgement(BUSINESS_CONTEXT);
                    if (amendmentJudgementFlag == false) {
                        currentTag = "zeroPayJudge";
                        break;
                    }
                    if (amendmentJudgementFlag == true) {
                        currentTag = "orderGroupCreate";
                        break;
                    }
                }
                case "OrderCreate": {
                    //AutoTaskNode: 创建订单
                    orderCreateActivityExecute();
                    currentTag = "workFlowRouter";
                    break;
                }
                case "validateBeforeSavingSubFlow": {
                    //SubBpmNode: 订单保存前校验子流程
                    subBpmValidateBeforeSavingSubFlow();
                    currentTag = "OrderCreate";
                    break;
                }
                case "PaymentSuccessCallback": {
                    //SubBpmNode: 支付成功回调处理子流程
                    subBpmPaySuccessCallbackSubFlow();
                    currentTag = "InventoryReduce";
                    break;
                }
                case "orderGroupCreate": {
                    //AutoTaskNode: 创建订单组
                    orderGroupCreateActivityExecute();
                    currentTag = "zeroPayJudge";
                    break;
                }
                case "manualCheckJudge": {
                    //DecisionNode: 人工校验判断
                    securityManualCheckFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isSecurityManualCheckPass(BUSINESS_CONTEXT);
                    if (securityManualCheckFlag == true) {
                        currentTag = "DeliveryOrderCreate";
                        break;
                    }
                    if (securityManualCheckFlag == false) {
                        currentTag = "OrderReverse";
                        break;
                    }
                }
                case "OMZeroPayActivity": {
                    //AutoTaskNode: 0元支付处理
                    zeroPayActivityExecute();
                    currentTag = "InventoryReduce";
                    break;
                }
                case "securityJudge": {
                    //DecisionNode: 安全校验判断
                    securityAutoCheckFlag = ((WorkFlowRouter)BeanProvider.getBean("workFlowRouter")).isSecurityAutoCheckPass(BUSINESS_CONTEXT);
                    if (securityAutoCheckFlag == true) {
                        currentTag = "DeliveryOrderCreate";
                        break;
                    }
                    if (securityAutoCheckFlag == false) {
                        currentTag = "SecurityManualJudgeCallback";
                        break;
                    }
                }
                case "PaymentPendingCallback": {
                    if (trigger) {
                    } else {
                        running = false;
                    }
                    currentTag = "waitPaymentSuccess";
                    break;
                }
                default: {
                    running = false;
                }
            }
            
            if (trigger) {
                trigger = false;
            }
        }
        
        _pResult.put("paymentType", paymentType);
        _pResult.put("pureZero", pureZero);
        _pResult.put("inventoryReduceFlag", inventoryReduceFlag);
        _pResult.put("securityAutoCheckFlag", securityAutoCheckFlag);
        _pResult.put("securityManualCheckFlag", securityManualCheckFlag);
        _pResult.put("amendmentJudgementFlag", amendmentJudgementFlag);
        return _pResult;
    }

    private void deliveryOrderCreateActivityExecute() {
        ((DeliveryOrderCreateActivity)BeanProvider.getBean("deliveryOrderCreateActivity")).execute(BUSINESS_CONTEXT);
    }

    private void securityValidateStatusUpdateActivityExecute() {
        ((SecurityValidateStatusUpdateActivity)BeanProvider.getBean("securityValidateStatusUpdateActivity")).execute(BUSINESS_CONTEXT);
    }

    private void orderReverseActivityExecute() {
        ((OrderReverseActivity)BeanProvider.getBean("orderReverseActivity")).execute(BUSINESS_CONTEXT);
    }

    private void inventoryReduceActivityExecute() {
        ((InventoryReduceActivity)BeanProvider.getBean("inventoryReduceActivity")).execute(BUSINESS_CONTEXT);
    }

    private void autoChargeActivityExecute() {
        ((AutoChargeActivity)BeanProvider.getBean("autoChargeActivity")).execute(BUSINESS_CONTEXT);
    }

    private void paymentOrderCreateActivityExecute() {
        ((PaymentOrderCreateActivity)BeanProvider.getBean("paymentOrderCreateActivity")).execute(BUSINESS_CONTEXT);
    }

    private void subBpmPaySuccessCallbackSubFlow() {
        //SubBpmNode: 支付成功回调处理子流程
        {
            Map<String, Object> _subBpmContext = new HashMap<>();
            _subBpmContext.put("BUSINESS_CONTEXT", BUSINESS_CONTEXT);
            ProcessEngineFactory.getProcessEngine().start("bpm.om.paySuccessCallbackSubFlow", _subBpmContext);
        }
    }

    private void orderGroupCreateActivityExecute() {
        ((OrderGroupCreateActivity)BeanProvider.getBean("orderGroupCreateActivity")).execute(BUSINESS_CONTEXT);
    }

    private void zeroPayActivityExecute() {
        ((ZeroPayActivity)BeanProvider.getBean("zeroPayActivity")).execute(BUSINESS_CONTEXT);
    }

}
{securityAutoCheckFlag=null, securityManualCheckFlag=null, inventoryReduceFlag=null, amendmentJudgementFlag=null, pureZero=null, paymentType=}

package bpm.om;

import com.allibaba.compileflow.test.mock.MockJavaClazz;
import java.util.Map;
import java.util.HashMap;
import com.alibaba.compileflow.engine.common.utils.DataType;
import com.alibaba.compileflow.engine.ProcessEngineFactory;
import java.lang.Integer;
import com.alibaba.compileflow.engine.common.utils.ObjectFactory;
import com.alibaba.compileflow.engine.process.preruntime.generator.bean.BeanProvider;
import com.alibaba.compileflow.engine.runtime.instance.StatefulProcessInstance;

public class WaitpaySuccessflowFlow implements StatefulProcessInstance {

    private java.lang.Integer num = null;
    private java.lang.Integer numSqrt = null;

    public Map<String, Object> execute(Map<String, Object> _pContext) throws Exception {
        num = (Integer)DataType.transfer(_pContext.get("num"), Integer.class);
        Map<String, Object> _pResult = new HashMap<>();
        //AutoTaskNode: 计算平方根
        mockJavaClazzMockReturnMethod();
        //WaitEventNode: ֧等待支付成功事件
        if (true) {
            _pResult.put("numSqrt", numSqrt);
            return _pResult ;
        } 
        //AutoTaskNode: 计算价格2
        mockJavaClazzCalPrice();
        _pResult.put("numSqrt", numSqrt);
        return _pResult;
    }

    private void mockJavaClazzMockReturnMethod() {
        numSqrt = ((MockJavaClazz)ObjectFactory.getInstance("com.allibaba.compileflow.test.mock.MockJavaClazz")).mockReturnMethod(num);
    }

    private void mockJavaClazzCalPrice() {
        numSqrt = ((MockJavaClazz)ObjectFactory.getInstance("com.allibaba.compileflow.test.mock.MockJavaClazz")).calPrice(num);
    }

    public Map<String, Object> trigger(Map<String, Object> _pContext, String currentTag) throws Exception {
        num = (Integer)DataType.transfer(_pContext.get("num"), Integer.class);
        Map<String, Object> _pResult = new HashMap<>();
        boolean running = true;
        boolean trigger = true;
        String _event = (String)_pContext.get("eventName") == null?"" :(String)_pContext.get("eventName");
        

        while (running) {
            switch (currentTag) {
                case "start": {
                    currentTag = "rate";
                    break;
                }
                case "end": {
                    running = false;
                    break;
                }
                case "rate": {
                    //AutoTaskNode: 计算平方根
                    mockJavaClazzMockReturnMethod();
                    currentTag = "PaymentPendingCallback";
                    break;
                }
                case "PaymentPendingCallback": {
                    //WaitEventNode: ֧等待支付成功事件
                    if(!_event.equals("PaymentPendingCallback")) {
                        _pResult.put("numSqrt", numSqrt);
                        return _pResult ;
                    } 
                    currentTag = "rate2";
                    break;
                }
                case "rate2": {
                    //AutoTaskNode: 计算价格2
                    mockJavaClazzCalPrice();
                    currentTag = "end";
                    break;
                }
                default: {
                    running = false;
                }
            }
            
            if (trigger) {
                trigger = false;
            }
        }
        
        _pResult.put("numSqrt", numSqrt);
        return _pResult;
    }

}
------receiver not real event------
<?xml version="1.0" encoding="UTF-8"?>
<bpm code="bpm.om.waitpaySuccessflow" name="test" type="process" description="This is test demo.">
  <var name="num" description="入参" dataType="java.lang.Integer" inOutType="param"></var>
  <var name="numSqrt" description="开根号结果" dataType="java.lang.Integer" inOutType="return"></var>
  <start id="1" name="开始" tag="start" g="115,16,30,30">
    <transition to="17" g=":-15,20"></transition>
  </start>
  <end id="11" name="结束" tag="end" g="130,815,30,30"></end>
  <autoTask id="17" name="计算平方根" tag="rate" g="95,160,88,48">
    <transition to="29" g=":-15,20"></transition>
    <action type="java">
      <actionHandle clazz="com.allibaba.compileflow.test.mock.MockJavaClazz" method="mockReturnMethod">
        <var name="input" dataType="java.lang.Integer" contextVarName="num" inOutType="param"></var>
        <var name="output" dataType="java.lang.Integer" contextVarName="numSqrt" inOutType="return"></var>
      </actionHandle>
    </action>
  </autoTask>
  <waitEventTask id="29" name="֧等待支付成功事件" tag="PaymentPendingCallback" eventName="PaymentPendingCallback" g="100,370,101,53">
    <transition to="38" g=":-15,20"></transition>
  </waitEventTask>
  <autoTask id="38" name="计算价格2" tag="rate2" g="95,545,88,48">
    <transition to="11" g=":-15,20"></transition>
    <action type="java">
      <actionHandle clazz="com.allibaba.compileflow.test.mock.MockJavaClazz" method="calPrice">
        <var name="input" dataType="java.lang.Integer" contextVarName="num" inOutType="param"></var>
        <var name="output" dataType="java.lang.Integer" contextVarName="numSqrt" inOutType="return"></var>
      </actionHandle>
    </action>
  </autoTask>
</bpm>
package bpm.om;

import com.alibaba.compileflow.engine.runtime.instance.ProcessInstance;
import java.util.HashMap;
import com.alibaba.compileflow.engine.common.utils.DataType;
import com.alibaba.compileflow.engine.process.preruntime.generator.bean.BeanProvider;
import com.alibaba.compileflow.engine.ProcessEngineFactory;
import java.lang.Integer;
import com.allibaba.compileflow.test.mock.MockJavaClazz;
import java.util.Map;
import com.alibaba.compileflow.engine.common.utils.ObjectFactory;

public class WaitpaySuccessflowFlow implements ProcessInstance {

    private java.lang.Integer num = null;
    private java.lang.Integer numSqrt = null;

    public Map<String, Object> execute(Map<String, Object> _pContext) throws Exception {
        num = (Integer)DataType.transfer(_pContext.get("num"), Integer.class);
        Map<String, Object> _pResult = new HashMap<>();
        //AutoTaskNode: 计算平方根
        numSqrt = ((MockJavaClazz)ObjectFactory.getInstance("com.allibaba.compileflow.test.mock.MockJavaClazz")).mockReturnMethod(num);
        //WaitEventNode: ֧等待支付成功事件
        if (true) {
            _pResult.put("numSqrt", numSqrt);
            return _pResult ;
        } 
        //AutoTaskNode: 计算价格2
        numSqrt = ((MockJavaClazz)ObjectFactory.getInstance("com.allibaba.compileflow.test.mock.MockJavaClazz")).calPrice(num);
        _pResult.put("numSqrt", numSqrt);
        return _pResult;
    }

}
Tests run: 6, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 3.249 sec <<< FAILURE!
testProcessEngineBpmn20(com.allibaba.compileflow.test.ProcessEngineTest)  Time elapsed: 2.164 sec  <<< ERROR!
com.alibaba.compileflow.engine.common.CompileFlowException: compile file[/home/target/.flowclasses/KtvFlow.java] to class[KtvFlow] failed,Pb(235) Syntax error on token "null", invalid Name

	at com.alibaba.compileflow.engine.process.preruntime.compiler.impl.support.EcJavaCompiler.compile(EcJavaCompiler.java:233)
	at com.alibaba.compileflow.engine.process.preruntime.compiler.impl.CompilerImpl.compileJavaCode(CompilerImpl.java:52)
	at com.alibaba.compileflow.engine.runtime.impl.AbstractProcessRuntime.compileJavaCode(AbstractProcessRuntime.java:245)
	at com.alibaba.compileflow.engine.runtime.impl.AbstractProcessRuntime.lambda$compile$0(AbstractProcessRuntime.java:131)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at com.alibaba.compileflow.engine.runtime.impl.AbstractProcessRuntime.compile(AbstractProcessRuntime.java:131)
	at com.alibaba.compileflow.engine.process.impl.AbstractProcessEngine.getCompiledRuntime(AbstractProcessEngine.java:79)
	at com.alibaba.compileflow.engine.process.impl.AbstractProcessEngine.lambda$getProcessRuntime$1(AbstractProcessEngine.java:73)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at com.alibaba.compileflow.engine.process.impl.AbstractProcessEngine.getProcessRuntime(AbstractProcessEngine.java:72)
	at com.alibaba.compileflow.engine.process.impl.BpmnStatelessProcessEngineImpl.execute(BpmnStatelessProcessEngineImpl.java:37)
	at com.alibaba.compileflow.engine.process.impl.BpmnStatelessProcessEngineImpl.start(BpmnStatelessProcessEngineImpl.java:43)
	at com.allibaba.compileflow.test.ProcessEngineTest.testProcessEngineBpmn20(ProcessEngineTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

testTiggerWaitPayProcess(com.allibaba.compileflow.test.ProcessEngineTest)  Time elapsed: 0.073 sec  <<< ERROR!
java.lang.LinkageError: loader (instance of  com/alibaba/compileflow/engine/process/preruntime/compiler/impl/FlowClassLoader): attempted  duplicate class definition for name: "bpm/om/WaitpaySuccessflowFlow"
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:635)
	at com.alibaba.compileflow.engine.process.preruntime.compiler.impl.FlowClassLoader.defineClass(FlowClassLoader.java:59)
	at com.alibaba.compileflow.engine.process.preruntime.compiler.impl.CompilerImpl.compileJavaCode(CompilerImpl.java:56)
	at com.alibaba.compileflow.engine.runtime.impl.AbstractProcessRuntime.compileJavaCode(AbstractProcessRuntime.java:245)
	at com.alibaba.compileflow.engine.runtime.impl.AbstractProcessRuntime.lambda$compile$0(AbstractProcessRuntime.java:131)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at com.alibaba.compileflow.engine.runtime.impl.AbstractProcessRuntime.compile(AbstractProcessRuntime.java:131)
	at com.alibaba.compileflow.engine.process.impl.AbstractProcessEngine.getCompiledRuntime(AbstractProcessEngine.java:79)
	at com.alibaba.compileflow.engine.process.impl.AbstractProcessEngine.lambda$getProcessRuntime$1(AbstractProcessEngine.java:73)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at com.alibaba.compileflow.engine.process.impl.AbstractProcessEngine.getProcessRuntime(AbstractProcessEngine.java:72)
	at com.alibaba.compileflow.engine.process.impl.TbbpmStatefulProcessEngineImpl.trigger(TbbpmStatefulProcessEngineImpl.java:28)
	at com.allibaba.compileflow.test.ProcessEngineTest.testTiggerWaitPayProcess(ProcessEngineTest.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)


Results :

Tests in error: 
  testProcessEngineBpmn20(com.allibaba.compileflow.test.ProcessEngineTest): compile file[/home/target/.flowclasses/KtvFlow.java] to class[KtvFlow] failed,Pb(235) Syntax error on token "null", invalid Name(..)
  testTiggerWaitPayProcess(com.allibaba.compileflow.test.ProcessEngineTest): loader (instance of  com/alibaba/compileflow/engine/process/preruntime/compiler/impl/FlowClassLoader): attempted  duplicate class definition for name: "bpm/om/WaitpaySuccessflowFlow"

Tests run: 7, Failures: 0, Errors: 2, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  7.318 s
[INFO] Finished at: 2021-11-14T04:57:23+05:30
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project compileflow: There are test failures.
[ERROR] 
[ERROR] Please refer to /home/target/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
{'error': True, 'log_file': 'output-2021-11-13T23:27:14-3757.log', 'message': '', 'start_time': '2021-11-13T23:27:14', 'end_time': '2021-11-13T23:27:23', 'command': ['mvn', '-fae', 'test'], 'faketime_str': '+0', 'timezone': 'Asia/Kolkata'}
